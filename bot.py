import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
import os
import json

# –¢–æ–∫–µ–Ω –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
API_TOKEN = '8136774944:AAF9HhHax42vnA6ucdpCArAuuRtVyoP9BWs'

bot = telebot.TeleBot(API_TOKEN)

# –ü—É—Ç–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
HABIT_DATA_PATH = "habits.json"
TASK_DATA_PATH = "tasks.json"
LOG_FILE = "bot_log.txt"

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–æ–≤
class BaseTracker:
    def __init__(self, data_path):
        self.data_path = data_path
        self.data = {}
        self.load_data()

    def load_data(self):
        if os.path.exists(self.data_path):
            with open(self.data_path, "r") as file:
                self.data = json.load(file)
        else:
            self.data = {}

    def save_data(self):
        with open(self.data_path, "w") as file:
            json.dump(self.data, file, indent=4)

    def add_entry(self, user_id, entry):
        if user_id not in self.data:
            self.data[user_id] = []
        self.data[user_id].append(entry)
        self.save_data()

    def get_entries(self, user_id):
        return self.data.get(user_id, [])

    def delete_entry(self, user_id, index):
        if user_id in self.data and 0 <= index < len(self.data[user_id]):
            del self.data[user_id][index]
            self.save_data()

# –î–æ—á–µ—Ä–Ω–∏–µ –∫–ª–∞—Å—Å—ã
class HabitTracker(BaseTracker):
    def __init__(self):
        super().__init__(HABIT_DATA_PATH)

class TaskTracker(BaseTracker):
    def __init__(self):
        super().__init__(TASK_DATA_PATH)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–æ–≤
habit_tracker = HabitTracker()
task_tracker = TaskTracker()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def set_user_state(user_id, state):
    user_states[user_id] = state

def get_user_state(user_id):
    return user_states.get(user_id)

def reset_user_state(user_id):
    user_states.pop(user_id, None)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–∏–≤—ã—á–µ–∫
def send_habit_file(chat_id, habits):
    file_path = f"habits_{chat_id}.txt"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with open(file_path, "w", encoding="utf-8") as file:
        file.write("–í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n")
        for i, habit in enumerate(habits, start=1):
            file.write(f"{i}. {habit}\n")
    with open(file_path, "rb") as file:
        bot.send_document(chat_id, file)
    os.remove(file_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", "–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
    markup.add("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å", "–ß–µ–∫-–ª–∏—Å—Ç –Ω–∞ –¥–µ–Ω—å")
    markup.add("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", "–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫")
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏.", reply_markup=main_menu())

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
def add_habit(message):
    set_user_state(message.chat.id, "adding_habit")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:")

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "adding_habit")
def process_habit(message):
    habit_name = message.text
    habit_tracker.add_entry(str(message.chat.id), habit_name)
    reset_user_state(message.chat.id)
    bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu())

# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
def delete_habit(message):
    habits = habit_tracker.get_entries(str(message.chat.id))
    if not habits:
        bot.send_message(message.chat.id, "üòî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_menu())
    else:
        set_user_state(message.chat.id, "deleting_habit")
        response = "üìã –í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n" + "\n".join([f"{i+1}. {habit}" for i, habit in enumerate(habits)])
        response += "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        bot.send_message(message.chat.id, response)

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "deleting_habit")
def process_delete_habit(message):
    try:
        index = int(message.text) - 1
        habits = habit_tracker.get_entries(str(message.chat.id))
        if 0 <= index < len(habits):
            deleted_habit = habits[index]
            habit_tracker.delete_entry(str(message.chat.id), index)
            bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ '{deleted_habit}' —É–¥–∞–ª–µ–Ω–∞!", reply_markup=main_menu())
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∏–≤—ã—á–∫–∏.")
    reset_user_state(message.chat.id)

@bot.message_handler(func=lambda message: message.text == "–ß–µ–∫-–ª–∏—Å—Ç –Ω–∞ –¥–µ–Ω—å")
def checklist(message):
    tasks = task_tracker.get_entries(str(message.chat.id))
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_tasks"))
    
    if tasks:
        response = "üìã –í–∞—à —á–µ–∫-–ª–∏—Å—Ç –Ω–∞ –¥–µ–Ω—å:\n" + "\n".join([f"{i+1}. {task}" for i, task in enumerate(tasks)])
    else:
        response = "üòî –ß–µ–∫-–ª–∏—Å—Ç –Ω–∞ –¥–µ–Ω—å –ø—É—Å—Ç."
    bot.send_message(message.chat.id, response, reply_markup=markup)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å
@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å")
def add_task(message):
    set_user_state(message.chat.id, "adding_task")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å:")

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "adding_task")
def process_task(message):
    task = message.text
    task_tracker.add_entry(str(message.chat.id), task)
    reset_user_state(message.chat.id)
    bot.send_message(message.chat.id, f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ '{task}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —á–µ–∫-–ª–∏—Å—Ç –Ω–∞ –¥–µ–Ω—å!", reply_markup=main_menu())

# –ß–µ–∫-–ª–∏—Å—Ç –Ω–∞ –¥–µ–Ω—å
@bot.message_handler(func=lambda message: message.text == "–ß–µ–∫-–ª–∏—Å—Ç –Ω–∞ –¥–µ–Ω—å")
def checklist(message):
    tasks = task_tracker.get_entries(str(message.chat.id))
    if tasks:
        response = "üìã –í–∞—à —á–µ–∫-–ª–∏—Å—Ç –Ω–∞ –¥–µ–Ω—å:\n" + "\n".join([f"{i+1}. {task}" for i, task in enumerate(tasks)])
    else:
        response = "üòî –ß–µ–∫-–ª–∏—Å—Ç –Ω–∞ –¥–µ–Ω—å –ø—É—Å—Ç."
    bot.send_message(message.chat.id, response)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä")
def add_notifier(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úÖ –û–ö", callback_data="notifier_ok"),
               InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="notifier_back"))
    bot.send_message(message.chat.id, 
                     "üïí –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ' –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞.\n–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ '–û–ö'.", 
                     reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("notifier_"))
def handle_notifier_buttons(call):
    if call.data == "notifier_ok":
        bot.send_message(call.message.chat.id, "‚úÖ –ù–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_menu())
    elif call.data == "notifier_back":
        bot.send_message(call.message.chat.id, "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())

@bot.callback_query_handler(func=lambda call: call.data == "refresh_tasks")
def refresh_tasks(call):
    task_tracker.data[str(call.message.chat.id)] = []  # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    task_tracker.save_data()  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    bot.edit_message_text("‚úÖ –ß–µ–∫-–ª–∏—Å—Ç –Ω–∞ –¥–µ–Ω—å –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω –∏ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç.", 
                          chat_id=call.message.chat.id, 
                          message_id=call.message.message_id, 
                          reply_markup=None)

# –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫
@bot.message_handler(func=lambda message: message.text == "–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫")
def list_habits(message):
    habits = habit_tracker.get_entries(str(message.chat.id))
    if habits:
        response = "üìã –í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n" + "\n".join([f"{i+1}. {habit}" for i, habit in enumerate(habits)])
        bot.send_message(message.chat.id, response)
        send_habit_file(message.chat.id, habits)  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
    else:
        response = "üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫."
        bot.send_message(message.chat.id, response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(func=lambda message: True)
def unknown_command(message):
    bot.send_message(message.chat.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
